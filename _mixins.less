/**
 * Compiled from:
 * https://css-tricks.com/snippets/css/useful-css3-less-mixins/
 * http://getpreboot.com/
 * http://web.telegram.com
 * https://github.com/hzdg/bedrock/tree/master/mixins
 */

/* Useful variables
--------------------------------------------------------*/
@mobile: ~"only screen and (max-width: 480px)";
@tablet: ~"only screen and (min-width: 768px) and (max-width:1024px)";

@landscape: ~"and (orientation: landscape)";
@portrait: ~"and (orientation: portrait)";

// Specific devices
@iphone5: ~"only screen and (min-device-width: 320px) and (max-device-width: 568px)";
@iphone4: ~"only screen and (min-device-width: 320px) and (max-device-width: 480px)";


/**
 * Add all browser prefixes
 * @property {string} - What type of property
 * @value {string, value} - Arguments
 */
.prefix(@property, @value) {
  @prop: replace(~"@{property}","'","","g");
  @val: replace(~"@{value}","'","","g");

  -webkit-@{prop}: @val;
     -moz-@{prop}: @val;
      -ms-@{prop}: @val;
       -o-@{prop}: @val;
          @{prop}: @val;
}

.calc(@property, @expression) {
    @{property}: ~"expression(@{expression})"; // Old IE5+
    @{property}: ~"-webkit-calc(@{expression})";
    @{property}: ~"-moz-calc(@{expression})"; // FF
    @{property}: ~"-o-calc(@{expression})";
    @{property}: ~"calc(@{expression})"; // IE9+, non-profixed
}

// Reset filters for IE
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

// Padding and Margin
// Shortcuts for setting horizontal or vertical margin at once.
.h-margin(@val) {
    margin-left: @val;
    margin-right: @val;
}

.v-margin(@val) {
       margin-top: @val;
    margin-bottom: @val;
}

// Shortcuts for setting horizontal or vertical padding at once.
.h-padding(@val) {
    padding-left: @val;
    padding-right: @val;
}

.v-padding(@val) {
       padding-top: @val;
    padding-bottom: @val;
}

// Simpler Size
// set one value for squares, two values for rectangles
.size(@size) {
    width: @size;
    height: @size;
}
.size(@width, @height) {
    width: @width;
    height: @height;
}

.square(@size) {
    .size(@size);
}

.circle(@size, @bg:@default-bg) {
  .size(@size);
  .border-radius(@size);
  background:@bg;
}

// Horizontally center a block element.
.center-block() {
    display: block;
    .h-margin(auto);
}

// Better { display: Inline-block }
.inline-block() {
    display: inline-block;
}

.inline-block() when (@support-ie7 = true) {
    .@{ie7-class} & {
        display: inline;
        zoom: 1;
    }
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility) {
    -webkit-backface-visibility: @visibility;
       -moz-backface-visibility: @visibility;
        -ms-backface-visibility: @visibility;
            backface-visibility: @visibility;
}

.appearance(@appearance){
    -webkit-appearance: @appearance;
       -moz-appearance: @appearance;
            appearance: @appearance;
}

// Opacity
.opacity (@opacity: 0.5) {
    -webkit-opacity: @opacity;
       -moz-opacity: @opacity;
            opacity: @opacity;
        @opacity-ie: @opacity * 100;
             filter: ~"alpha(opacity=@{opacity-ie})"; // IE8
}

 // Resize anything
.resize(@direction) {
    resize: @direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
}

.hyphens(@mode: auto) {
          word-wrap: break-word;
    -webkit-hyphens: @mode;
       -moz-hyphens: @mode;
        -ms-hyphens: @mode;
         -o-hyphens: @mode;
            hyphens: @mode;
}

.wrap(@mode: normal) {
    -ms-word-break: @mode;
        word-break: @mode;
}

// Clear fix
/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.clearfix(){
    &:before,
    &:after{
        content: " "; /* 1 */
        display: table; /* 2 */
    }

    &:after{
        clear:both;
    }
}



// User select
// For selecting text on the page
.user-select(@argument: none) {
    -webkit-touch-callout: @argument;
    -webkit-user-select: @argument;
     -khtml-user-select: @argument;
       -moz-user-select: @argument;
        -ms-user-select: @argument;
         -o-user-select: @argument;
            user-select: @argument;
}

.placeholder(@color: @input-color-placeholder) {
    &:-moz-placeholder            { color: @color; } // Firefox 4-18
    &::-moz-placeholder           { color: @color; } // Firefox 19+
    &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
    &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

.text-shadow (@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
    text-shadow: @string;
}

// Box Shadows
.box-shadow(@arguments) {
    -webkit-box-shadow: @arguments;
       -moz-box-shadow: @arguments;
            box-shadow: @arguments;
}

.drop-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
    -webkit-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
       -moz-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
            box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

.inner-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
    -webkit-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
       -moz-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
            box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

.box-sizing(@sizing: border-box) {
    -webkit-box-sizing: @sizing;
       -moz-box-sizing: @sizing;
        -ms-box-sizing: @sizing;
            box-sizing: @sizing;
}


// Border Radius
.border-radius (@radius) {
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
        -ms-border-radius: @radius;
         -o-border-radius: @radius;
            border-radius: @radius;

    -webkit-background-clip: padding-box;
       -moz-background-clip: padding;
            background-clip: padding-box;
}

.border-radiuses (@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
    -webkit-border-top-right-radius:    @topright;
    -webkit-border-bottom-right-radius: @bottomright;
    -webkit-border-bottom-left-radius:  @bottomleft;
    -webkit-border-top-left-radius:     @topleft;

    -moz-border-radius-topright:        @topright;
    -moz-border-radius-bottomright:     @bottomright;
    -moz-border-radius-bottomleft:      @bottomleft;
    -moz-border-radius-topleft:         @topleft;

    border-top-right-radius:            @topright;
    border-bottom-right-radius:         @bottomright;
    border-bottom-left-radius:          @bottomleft;
    border-top-left-radius:             @topleft;


    -webkit-background-clip: padding-box;
       -moz-background-clip: padding;
            background-clip: padding-box;
}

.rounded(@radius: 2px) {
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
            border-radius: @radius;
}



// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
    -webkit-background-clip: @clip;
       -moz-background-clip: @clip;
            background-clip: @clip;
}

.background-size(@size) {
    -webkit-background-size: @size;
       -moz-background-size: @size;
         -o-background-size: @size;
            background-size: @size;
}


// Gradients
.gradient (@startColor: #eee, @endColor: white) {
    background-color: @startColor;
    background: #e8e8e8 repeat-x left top;
    background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
    background: -webkit-linear-gradient(top, @startColor, @endColor);
    background: -moz-linear-gradient(top, @startColor, @endColor);
    background: -ms-linear-gradient(top, @startColor, @endColor);
    background: -o-linear-gradient(top, @startColor, @endColor);
}

.horizontal-gradient (@startColor: #eee, @endColor: white) {
    background-color: @startColor;
    background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
    background-image: -webkit-linear-gradient(left, @startColor, @endColor);
    background-image: -moz-linear-gradient(left, @startColor, @endColor);
    background-image: -ms-linear-gradient(left, @startColor, @endColor);
    background-image: -o-linear-gradient(left, @startColor, @endColor);
}

// CSS3 Content Columns
.columns(@columnCount, @columnGap) {
    -webkit-column-count: @columnCount;
       -moz-column-count: @columnCount;
            column-count: @columnCount;

    -webkit-column-gap: @columnGap;
       -moz-column-gap: @columnGap;
            column-gap: @columnGap;
}

// Explicitly remove style from form elements
.no-form() {
    textarea,
    select,
    input[type="date"],
    input[type="datetime"],
    input[type="datetime-local"],
    input[type="email"],
    input[type="month"],
    input[type="number"],
    input[type="password"],
    input[type="search"],
    input[type="tel"],
    input[type="text"],
    input[type="time"],
    input[type="url"],
    input[type="week"] {
        .background-clip(padding);
        .border-radius(0);

        -webkit-appearance: none;
        background-color: #fff;
        color: #000;
        outline: 0;
        margin: 0;
        padding: 0;
        vertical-align: middle;
        border: none;
    }

    fieldset,
    button,
    input[type="button"],
    input[type="reset"],
    input[type="submit"] {
        -webkit-appearance: none;
        border: none;
        padding: 0;
        margin: 0;
    }

    button,
    input[type="button"],
    input[type="reset"],
    input[type="submit"] {
        background: white;
        color: #000;
    }

    legend {
        padding: 0;
    }
}

// Animations
.animation (@name, @duration: 300ms, @delay: 0, @ease: ease) {
    -webkit-animation: @name @duration @delay @ease;
       -moz-animation: @name @duration @delay @ease;
        -ms-animation: @name @duration @delay @ease;
            animation: @name @duration @delay @ease;
}

// Transitions
.transition (@transition) {
    -webkit-transition: @transition;
       -moz-transition: @transition;
        -ms-transition: @transition;
         -o-transition: @transition;
            transition: @transition
}

.transition-delay(@transition-delay) {
    -webkit-transition-delay: @transition-delay;
       -moz-transition-delay: @transition-delay;
         -o-transition-delay: @transition-delay;
            transition-delay: @transition-delay;
}

.transition-duration(@transition-duration) {
    -webkit-transition-duration: @transition-duration;
       -moz-transition-duration: @transition-duration;
         -o-transition-duration: @transition-duration;
            transition-duration: @transition-duration;
}

// Transformations
.transform(@arguments) {
    -webkit-transform: @arguments;
       -moz-transform: @arguments;
         -o-transform: @arguments;
        -ms-transform: @arguments;
            transform: @arguments;
}

.scale (@factor) {
    -webkit-transform: scale(@factor);
       -moz-transform: scale(@factor);
        -ms-transform: scale(@factor);
         -o-transform: scale(@factor);
            transform: scale(@factor);
}

.rotate (@deg) {
    -webkit-transform: rotate(@deg);
       -moz-transform: rotate(@deg);
        -ms-transform: rotate(@deg);
         -o-transform: rotate(@deg);
            transform: rotate(@deg);
}

.skew (@deg, @deg2) {
    -webkit-transform: skew(@deg, @deg2);
       -moz-transform: skew(@deg, @deg2);
        -ms-transform: skew(@deg, @deg2);
         -o-transform: skew(@deg, @deg2);
            transform: skew(@deg, @deg2);
}

.translate (@x, @y:0) {
    -webkit-transform: translate(@x, @y);
       -moz-transform: translate(@x, @y);
        -ms-transform: translate(@x, @y);
         -o-transform: translate(@x, @y);
            transform: translate(@x, @y);
}

.translate3d (@x, @y: 0, @z: 0) {
    -webkit-transform: translate3d(@x, @y, @z);
       -moz-transform: translate3d(@x, @y, @z);
        -ms-transform: translate3d(@x, @y, @z);
         -o-transform: translate3d(@x, @y, @z);
            transform: translate3d(@x, @y, @z);
}

.perspective (@value: 1000) {
    -webkit-perspective: @value;
       -moz-perspective: @value;
        -ms-perspective: @value;
            perspective: @value;
}

.transform-origin (@x:center, @y:center) {
    -webkit-transform-origin: @x @y;
       -moz-transform-origin: @x @y;
        -ms-transform-origin: @x @y;
         -o-transform-origin: @x @y;
            transform-origin: @x @y;
}

/* Thanks to @brandonb927
   https://gist.github.com/brandonb927/3874012

   Prepending 'only screen and ' to each media query breaks nested media queries */

// .image-2x(@image, @width, @height, @repeat: no-repeat) {
//   @filename  : ~`/(.*)\.(jpg|jpeg|png|gif)/.exec(@{image})[1]`;
//   @extension : ~`/(.*)\.(jpg|jpeg|png|gif)/.exec(@{image})[2]`;
//   background-image: ~`"url(@{filename}.@{extension}?1)"`;
//   background-repeat: @repeat;

//   /* on retina, use image that's scaled by 2 */
//   @media
//     (-webkit-min-device-pixel-ratio: 2),
//     (   min--moz-device-pixel-ratio: 2),
//     (     -o-min-device-pixel-ratio: 2/1),
//     (        min-device-pixel-ratio: 2),
//     (                min-resolution: 192dpi),
//     (                min-resolution: 2dppx) {
//       background-image: ~`"url(@{filename}_2x.@{extension}?1)"`;
//       background-size: @width @height;
//   }
// }



.image-2x(@image, @width, @height, @repeat: no-repeat) {
    @filename  : ~`/(.*)\.(jpg|jpeg|png|gif)/.exec(@{image})[1]`;
    @extension : ~`/(.*)\.(jpg|jpeg|png|gif)/.exec(@{image})[2]`;
    background-image: ~`"url(@{filename}.@{extension})"`;
    background-repeat: @repeat;
    .is_2x & {
        background-image: ~`"url(@{filename}_2x.@{extension})"`;
        background-size: @width @height;
    }
}

.retina-image(@file-1x, @file-2x, @width-1x, @height-1x) {
    background-image: url("@{file-1x}");

    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
        background-image: url("@{file-2x}");
        background-size: @width-1x @height-1x;
    }
}

// --------------------------------------------------
// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) {
    display: ~"-webkit-@{display}";
    display: ~"-moz-@{display}";
    display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
    display: ~"-ms-@{display}"; // IE11
    display: @display;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex(@columns: initial) {
    -webkit-flex: @columns;
       -moz-flex: @columns;
        -ms-flex: @columns;
            flex: @columns;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
    -webkit-flex-direction: @direction;
       -moz-flex-direction: @direction;
        -ms-flex-direction: @direction;
            flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
    -webkit-flex-wrap: @wrap;
       -moz-flex-wrap: @wrap;
        -ms-flex-wrap: @wrap;
            flex-wrap: @wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
    -webkit-flex-flow: @flow;
       -moz-flex-flow: @flow;
        -ms-flex-flow: @flow;
            flex-flow: @flow;
}

// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) {
    -webkit-order: @order;
       -moz-order: @order;
        -ms-order: @order;
            order: @order;
}

// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) {
    -webkit-flex-grow: @grow;
       -moz-flex-grow: @grow;
        -ms-flex-grow: @grow;
            flex-grow: @grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
.flex-shrink(@shrink: 1) {
    -webkit-flex-shrink: @shrink;
       -moz-flex-shrink: @shrink;
        -ms-flex-shrink: @shrink;
            flex-shrink: @shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
.flex-basis(@width: auto) {
    -webkit-flex-basis: @width;
       -moz-flex-basis: @width;
        -ms-flex-basis: @width;
            flex-basis: @width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
.justify-content(@justify: flex-start) {
    -webkit-justify-content: @justify;
       -moz-justify-content: @justify;
        -ms-justify-content: @justify;
            justify-content: @justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
    -webkit-align-content: @align;
       -moz-align-content: @align;
        -ms-align-content: @align;
            align-content: @align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
    -webkit-align-items: @align;
       -moz-align-items: @align;
        -ms-align-items: @align;
            align-items: @align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
    -webkit-align-self: @align;
       -moz-align-self: @align;
        -ms-align-self: @align;
            align-self: @align;
}


// Flex List
.flex-list(@direction: row, @justify-content: initial, @align-items: flex-start, @wrap: nowrap){
    .flex-display;
    .flex-direction(@direction);
    .justify-content(@justify-content);
    .align-items(@align-items);
    .flex-wrap(@wrap);

    margin: 0;
    padding: 0;
    list-style: none;
}
